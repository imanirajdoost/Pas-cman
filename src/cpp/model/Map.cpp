#include <iostream>
#include "header/model/Map.h"

using namespace std;

vector<vector<MTYPE>> Map::map = {
        {MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL},
        {MTYPE::WALL,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::WALL,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::WALL},
        {MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL},
        {MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL},
        {MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL},
        {MTYPE::WALL,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::WALL},
        {MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL},
        {MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL},
        {MTYPE::WALL,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::WALL,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::WALL,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::WALL,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::WALL},
        {MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL},
        {MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL,MTYPE::EMPTY,MTYPE::EMPTY,MTYPE::EMPTY,MTYPE::EMPTY,MTYPE::EMPTY,MTYPE::EMPTY,MTYPE::EMPTY,MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL},
        {MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL,MTYPE::EMPTY,MTYPE::WALL,MTYPE::DOOR,MTYPE::DOOR,MTYPE::DOOR,MTYPE::WALL,MTYPE::EMPTY,MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL},
        {MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL,MTYPE::EMPTY,MTYPE::WALL,MTYPE::EMPTY,MTYPE::EMPTY,MTYPE::EMPTY,MTYPE::WALL,MTYPE::EMPTY,MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL},
        {MTYPE::TP,MTYPE::EMPTY,MTYPE::EMPTY,MTYPE::EMPTY,MTYPE::EMPTY,MTYPE::ITEM,MTYPE::EMPTY,MTYPE::EMPTY,MTYPE::WALL,MTYPE::EMPTY,MTYPE::EMPTY,MTYPE::EMPTY,MTYPE::WALL,MTYPE::EMPTY,MTYPE::EMPTY,MTYPE::ITEM,MTYPE::EMPTY,MTYPE::EMPTY,MTYPE::EMPTY,MTYPE::EMPTY,MTYPE::TP},
        {MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL,MTYPE::EMPTY,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::EMPTY,MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL},
        {MTYPE::WALL,MTYPE::EMPTY,MTYPE::EMPTY,MTYPE::EMPTY,MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL,MTYPE::EMPTY,MTYPE::EMPTY,MTYPE::EMPTY,MTYPE::EMPTY,MTYPE::EMPTY,MTYPE::EMPTY,MTYPE::EMPTY,MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL,MTYPE::EMPTY,MTYPE::EMPTY,MTYPE::EMPTY,MTYPE::WALL},
        {MTYPE::WALL,MTYPE::EMPTY,MTYPE::EMPTY,MTYPE::EMPTY,MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL,MTYPE::EMPTY,MTYPE::EMPTY,MTYPE::EMPTY,MTYPE::WALL},
        {MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL},
        {MTYPE::WALL,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::WALL,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::WALL},
        {MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL},
        {MTYPE::WALL,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::WALL,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::EMPTY,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::WALL,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::WALL},
        {MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL},
        {MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL},
        {MTYPE::WALL,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::WALL,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::WALL,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::WALL,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::WALL},
        {MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::ITEM,MTYPE::WALL},
        {MTYPE::WALL,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::ITEM,MTYPE::WALL},
        {MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL,MTYPE::WALL},
};

vector<tuple<int, int>> Map::intersections = {
    {1, 1}, {1, 5}, {1, 9}, {1, 11}, {1, 15}, {1, 19},
    {5, 1}, {5, 5}, {5, 9}, {5, 11}, {5, 15}, {5, 19},
    {8, 1}, {8, 5}, {8, 7}, {8, 9}, {8, 11}, {8, 13}, {8, 15}, {8, 19},
    {9, 5}, {9, 9}, {9, 11}, {9, 15},
    {10, 7}, {10, 13},
    {13, 7}, {13, 9}, {13, 13}, {13, 15},
    {15, 8}, {15, 8},
    {18, 1}, {18, 5}, {18, 9}, {18, 11}, {18, 15}, {18, 19},
    {20, 1}, {20, 3}, {20, 5}, {20, 9}, {20, 11}, {20, 13}, {20, 15}, {20, 19},
    {23, 1}, {23, 5}, {23, 7}, {23, 9}, {23, 11}, {23, 15}, {23, 17}, {23, 19},
    {10, 1}, {10, 9}, {10, 11}, {10, 19}
};

template <typename T>
MTYPE Map::getCurrentTileType(const T& gameObject) const{

    int px_x = gameObject->getX();
    int px_y = gameObject->getY();

    int map_x = px_x / 32;
    int map_y = px_y / 32;

    if ((map_x < 0 || map_x > 20) || (map_y < 0 || map_y > 26)) {
        std::cerr << "An error with the char_map coordonites (dont know how to fucking spell that word) has occured\n" << std::endl;
    }

    return map[map_y][map_x];
}